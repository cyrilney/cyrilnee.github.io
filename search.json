[{"title":"Leetcode shortest-supersequence","url":"/2020/04/25/Leetcode-shortest-supersequence/","content":"<h3 id=\"描述\"><a class=\"markdownIt-Anchor\" href=\"#描述\"></a> 描述</h3>\n<p>两个数组，一个长一个短，短的元素均不相同。找到长数组中包含短数组所有的元素的最短子数组，其出现顺序无关紧要。</p>\n<p>返回最短子数组的左端点和右端点，如有多个满足条件的子数组，返回左端点最小的一个。若不存在，返回空数组。</p>\n<pre><code>示例 1:\n\n输入:\nbig = [7,5,9,0,2,1,3,5,7,9,1,1,5,8,8,9,7]\nsmall = [1,5,9]\n输出: [7,10]\n</code></pre>\n<h3 id=\"思路\"><a class=\"markdownIt-Anchor\" href=\"#思路\"></a> 思路</h3>\n<p>目的是找到短数组在长数组中出现的最短位置。我这里通过一个dictionary记录big中出现的small元素及其位置。 由于记录长度的时候如果同个元素后者出现则以后者为准（前者或已经被统计）。使用队列记录每一个small元素的位置，当对尾的元素位置已经在后面出现过时（即队尾位置跟字典位置不相符时）表示队尾已经无用了，删除之。当字典元素与small元素数量相同时则表示是合法答案。 进行长度判断。</p>\n<h3 id=\"复杂度-on\"><a class=\"markdownIt-Anchor\" href=\"#复杂度-on\"></a> 复杂度: O(n)</h3>\n<p>队列最大长度为n，且元素只会出现一次。</p>\n<h3 id=\"answers-code\"><a class=\"markdownIt-Anchor\" href=\"#answers-code\"></a> Answers Code</h3>\n<pre><code>from collections import deque\n\nclass Node:\n    def __init__(self, val, index):\n        self.val = val\n        self.index = index\n\n\nclass Solution:\n    def shortestSeq(self, big: List[int], small: List[int]) -&gt; List[int]:\n        # 双端队列\n        q = deque()\n        max_index = -1\n        min_index = -1\n        small = set(small)\n        m = {}\n        i = 0\n        ans = []\n        while i &lt; len(big):\n            if big[i] in small:\n                m[big[i]] = i\n                q.append(Node(big[i], i))\n                while q[0].index != m[q[0].val]:\n                    q.popleft()\n\n            if len(m) == len(small):\n                if not ans or ans[1] - ans[0] &gt; q[-1].index - q[0].index:\n                    ans = [q[0].index, q[-1].index]\n\n            i += 1\n        return ans\n</code></pre>\n","tags":["Leetcode"]},{"title":"Leetcode No.46 permutations","url":"/2020/04/25/Leetcode-No-46-permutations/","content":"<h3 id=\"描述\"><a class=\"markdownIt-Anchor\" href=\"#描述\"></a> 描述</h3>\n<p>4月25日每日一题。给定一个<strong>没有重复</strong>数字的序列，返回其所有可能的全排列。</p>\n<pre><code>示例:\n输入: [1,2,3]\n输出:\n[\n  [1,2,3],\n  [1,3,2],\n  [2,1,3],\n  [2,3,1],\n  [3,1,2],\n  [3,2,1]\n]\n</code></pre>\n<h3 id=\"思路\"><a class=\"markdownIt-Anchor\" href=\"#思路\"></a> 思路</h3>\n<p>回溯算法例题。</p>\n<h3 id=\"复杂度-onn\"><a class=\"markdownIt-Anchor\" href=\"#复杂度-onn\"></a> 复杂度: O(n^n)</h3>\n<h3 id=\"answers-code\"><a class=\"markdownIt-Anchor\" href=\"#answers-code\"></a> Answers Code</h3>\n<pre><code>class Solution:\n    def permute(self, nums: List[int]) -&gt; List[List[int]]:\n        self.res = []\n        self.dfs(nums, [0]*len(nums), len(nums), [])\n        return self.res\n    def dfs(self, nums, used, total, ans):\n        if not total:\n            self.res.append(ans)\n            return\n        i = 0\n        while i &lt; len(nums):\n            if not used[i]:\n                used[i] = 1\n                self.dfs(nums, used, total - 1, ans + [nums[i]])\n                used[i] = 0\n            i += 1\n</code></pre>\n","tags":["Leetcode","每日一题"]},{"title":"Leetcode 数组中的逆序对","url":"/2020/04/24/leetcode-reverse-order-pair/","content":"<h3 id=\"描述\"><a class=\"markdownIt-Anchor\" href=\"#描述\"></a> 描述</h3>\n<p>在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组，求出这个数组中的逆序对的总数。</p>\n<pre><code>示例 1:\n\n输入: [7,5,6,4]\n输出: 5\n</code></pre>\n<h3 id=\"思路\"><a class=\"markdownIt-Anchor\" href=\"#思路\"></a> 思路</h3>\n<p>第一时间想到的是排序后计算偏移量的办法，如果数字不重复时是可行的。如果数值有重复，则位置偏移不能保证后面的值一定比前值要小。</p>\n<p>午睡的时候想到用树状数组统计前面的数字有多少个数字比它大就可以了，至于数字范围较大的问题，由于数字一共50000个，直接化为[1,50000]内的数字即可。对于静态查询的题目算是大财小用了，应该还有其他解，一时想不到。但这个解法已经是O(nlogn)了。</p>\n<h3 id=\"复杂度-onlogn\"><a class=\"markdownIt-Anchor\" href=\"#复杂度-onlogn\"></a> 复杂度: O(nlog(n))</h3>\n<h3 id=\"answers-code\"><a class=\"markdownIt-Anchor\" href=\"#answers-code\"></a> Answers Code</h3>\n<pre><code>class Node:\n    def __init__(self, val, index):\n        self.val = val\n        self.index = index\n\nclass Solution:\n\n    def reversePairs(self, nums: List[int]) -&gt; int:\n        max_index = 65537\n        tree = [0] * max_index\n\n        def lowerBit(num):\n            return num &amp; (-num)\n\n        def query(index):\n            ans = 0\n            while index &gt; 0:\n                ans += tree[index]\n                index -= lowerBit(index)\n            return ans\n\n        def add(index, num):\n            if index &lt;= 0:\n                return 0\n            while index &lt; max_index:\n                tree[index] += num\n                index += lowerBit(index)\n\n        i = 0\n        nodes = []\n\n        # 前期处理\n        while i &lt; len(nums):\n            nodes.append(Node(nums[i], i))\n            i += 1\n        nodes.sort(key=lambda node:node.val)\n        i = 0\n        cnt = 1\n        while i &lt; len(nums):\n            if i &gt; 0 and nodes[i].val &gt; nodes[i-1].val:\n                cnt += 1\n            nums[nodes[i].index] = cnt\n            i += 1\n\n        # print(nums)\n\n        i = len(nums) - 1\n        ans = 0\n        while i &gt;= 0:\n            ans += query(nums[i] - 1)\n            # print(query(nums[i] - 1))\n            add(nums[i], 1)\n            i -= 1\n        return ans\n</code></pre>\n","tags":["Leetcode","每日一题"]},{"title":"Leetcode coin-lcci/","url":"/2020/04/23/leetcode-coin-lcci/","content":"<h3 id=\"描述\"><a class=\"markdownIt-Anchor\" href=\"#描述\"></a> 描述</h3>\n<p>2020年4月23日每日一题。 硬币。给定数量不限的硬币，币值为25分、10分、5分和1分，编写代码计算n分有几种表示法。(结果可能会很大，你需要将结果模上1000000007)</p>\n<p>示例:</p>\n<pre><code> 输入: n = 5\n 输出：2\n 解释: 有两种方式可以凑成总金额:\n 5=5\n 5=1+1+1+1+1\n</code></pre>\n<h3 id=\"思路\"><a class=\"markdownIt-Anchor\" href=\"#思路\"></a> 思路</h3>\n<p>dp完全背包。将面值从小到大排列后假设为可选集合coins（即coins = [1,5,10,25]）。对于前i种硬币，面值j。有兑换次数</p>\n<p class='katex-block'><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>j</mi><mo>−</mo><mi>c</mi><mi>o</mi><mi>i</mi><mi>n</mi><mi>s</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">]</mo><mo>+</mo><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">dp[i][j] = dp[i][j-coins[i]] + dp[i-1][j]\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">p</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">p</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">s</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">p</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span></span></span></span></span></p>\n<h3 id=\"复杂度-on-空间-on\"><a class=\"markdownIt-Anchor\" href=\"#复杂度-on-空间-on\"></a> 复杂度: O(n) ，空间 O(n)</h3>\n<p>背包中硬币种类为常数。 空间进行优化压缩，只需要n的列表即可</p>\n<h3 id=\"answers-code\"><a class=\"markdownIt-Anchor\" href=\"#answers-code\"></a> Answers Code</h3>\n<pre><code>class Solution:\n    def waysToChange(self, n: int) -&gt; int:\n        dp = [0] * (n+1)\n        dp[0] = 1\n        coins = [1, 5, 10, 25]\n        # dp[n] = (dp[n] + dp[n-coins[i]]) % K\n        for coin in coins:\n            i = 0\n            while i &lt;= n - coin:\n                dp[i+coin] += dp[i]\n                dp[i+coin] %= 1000000007\n                i += 1\n        return dp[n]\n</code></pre>\n","tags":["Leetcode","每日一题"]},{"title":"Leetcode No.199 binary tree right side view","url":"/2020/04/22/Leetcode-No-199-binary-tree-right-side-view/","content":"<h3 id=\"描述\"><a class=\"markdownIt-Anchor\" href=\"#描述\"></a> 描述</h3>\n<p>2020年4月22日每日一题：给定一棵二叉树，想象自己站在它的右侧，按照从顶部到底部的顺序，返回从右侧所能看到的节点值。</p>\n<p>示例:</p>\n<pre><code>输入: [1,2,3,null,5,null,4]\n输出: [1, 3, 4]\n解释:\n\n   1            &lt;---\n /   \\\n2     3         &lt;---\n \\     \\\n  5     4       &lt;---\n</code></pre>\n<h3 id=\"思路\"><a class=\"markdownIt-Anchor\" href=\"#思路\"></a> 思路</h3>\n<p>题目较为简单，右侧深搜即可。全局使用列表保存对应深度下出现的第一个元素即为答案</p>\n<h3 id=\"复杂度-on\"><a class=\"markdownIt-Anchor\" href=\"#复杂度-on\"></a> 复杂度: O(n)</h3>\n<h3 id=\"answers-code\"><a class=\"markdownIt-Anchor\" href=\"#answers-code\"></a> Answers Code</h3>\n<pre><code># Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def __init__(self):\n        self.ans = []\n\n    def rightSideView(self, root: TreeNode) -&gt; List[int]:\n        if not root :\n            return []\n        self.rightDfs(root, 0);\n        return self.ans\n\n    def rightDfs(self, root: TreeNode, depth: int):\n        if not root:\n            return\n        if depth &gt;= len(self.ans):\n            self.ans.append(root.val)\n        self.rightDfs(root.right, depth+1)\n        self.rightDfs(root.left, depth+1)\n</code></pre>\n","tags":["Leetcode","每日一题"]},{"title":"Leetcode No.864 shortest path to get all keys.","url":"/2020/04/22/Leetcode-No-864-shortest-path-to-get-all-keys/","content":"<h3 id=\"描述\"><a class=\"markdownIt-Anchor\" href=\"#描述\"></a> 描述</h3>\n<p>给定一个二维网格 grid。 “.” 代表一个空房间， “#” 代表一堵墙， “@” 是起点，（“a”, “b”, …）代表钥匙，（“A”, “B”, …）代表锁。</p>\n<p>我们从起点开始出发，一次移动是指向四个基本方向之一行走一个单位空间。我们不能在网格外面行走，也无法穿过一堵墙。如果途经一个钥匙，我们就把它捡起来。除非我们手里有对应的钥匙，否则无法通过锁。</p>\n<p>假设 K 为钥匙/锁的个数，且满足 1 &lt;= K &lt;= 6，字母表中的前 K 个字母在网格中都有自己对应的一个小写和一个大写字母。换言之，每个锁有唯一对应的钥匙，每个钥匙也有唯一对应的锁。另外，代表钥匙和锁的字母互为大小写并按字母顺序排列。</p>\n<p>返回获取所有钥匙所需要的移动的最少次数。如果无法获取所有钥匙，返回 -1 。</p>\n<p>其中：</p>\n<ol>\n<li>1 &lt;= grid.length &lt;= 30</li>\n<li>1 &lt;= grid[0].length &lt;= 30</li>\n<li>grid[i][j] 只含有 ‘.’, ‘#’, ‘@’, ‘a’-‘f’ 以及 ‘A’-‘F’<br />\n钥匙的数目范围是 [1, 6]，每个钥匙都对应一个不同的字母，正好打开一个对应的锁。</li>\n</ol>\n<h3 id=\"思路\"><a class=\"markdownIt-Anchor\" href=\"#思路\"></a> 思路</h3>\n<p>一开始看到题目可以想到也许可以使用搜索解决。又因数字方位进一步验证了我的猜想。如思路如下：</p>\n<ol>\n<li>先确定K，使用深搜递归出一个钥匙获取顺序。如 “acbdef”</li>\n<li>根据获取顺序。从起点开始进行多次广搜 a =&gt; c  =&gt; b =&gt; d  =&gt; e  =&gt; f计算出一共的最短距离。</li>\n<li>广搜过程中遇墙则结束，遇到锁则判断钥匙是否已经在之前拿过了即为通过。</li>\n<li>最短距离取最小值。</li>\n</ol>\n<h3 id=\"复杂度-okknm\"><a class=\"markdownIt-Anchor\" href=\"#复杂度-okknm\"></a> 复杂度: O(K!K*nm)</h3>\n<p>由于K&lt;=6，k!最大值为720。单次广搜最坏情况为NM(30*30)，该解法最坏情况3,888,000</p>\n<h3 id=\"answers-code\"><a class=\"markdownIt-Anchor\" href=\"#answers-code\"></a> Answers Code</h3>\n<pre><code>class Solution {\n\n    // 广搜节点  定义横坐标 纵坐标 和 步数\n    static class Loc {\n        public int x;\n        public int y;\n        public int step;\n\n        @Override\n        public boolean equals(Object obj) {\n            if (!(obj instanceof Loc))\n                return super.equals(obj);\n            Loc loc = (Loc) obj;\n            return this.x == loc.x &amp;&amp; this.y == loc.y;\n        }\n\n        @Override\n        public int hashCode() {\n            return this.x * 40 + this.y;\n        }\n\n        public Loc(int x, int y, int step) {\n            this.x = x;\n            this.y = y;\n            this.step = step;\n        }\n\n        public Loc(int x, int y) {\n            this(x, y, 0);\n        }\n    }\n\n    final static Loc[] dir = new Loc[]{new Loc(0, 1), new Loc(1, 0), new Loc(0, -1), new Loc(-1, 0)};\n\n    public int shortestPathAllKeys(String[] grid) {\n        Character kChar = null;\n        for (int i = 0; i &lt; grid.length; i++) {\n            for (int j = 0; j &lt; grid[i].length(); j++) {\n                if (grid[i].charAt(j) &lt;= 'z' &amp;&amp; grid[i].charAt(j) &gt;= 'a') {\n                    if (kChar == null || kChar &lt; grid[i].charAt(j))\n                        kChar = grid[i].charAt(j);\n                }\n            }\n        }\n\n        return this.work(0, kChar - 'a' + 1, Collections.emptySet(), &quot;&quot;, grid);\n\n    }\n\n    public int work(int cur, int maxDeep, Set&lt;Character&gt; had, String aim, String[] grid) {\n\n        // 递归到最后一层。 开始for循环广搜处理\n        if (cur == maxDeep) {\n            char startChar = '@';\n            int total = 0;\n            Loc startLoc = new Loc(0, 0, 0);\n            had = new HashSet&lt;&gt;();\n            for (int k = 0; k &lt; maxDeep; k++) {\n                changeLocStart(startLoc, startChar, grid);\n                startLoc.step = total;\n                int temp = bfs(grid, startLoc, had, aim.charAt(k));\n                if (temp == -1) {\n                    return -1;\n                }\n                total = temp;\n                had.add(aim.charAt(k));\n                startChar = aim.charAt(k);\n            }\n            return total;\n\n        }\n        int max = Integer.MAX_VALUE;\n        for (char i = 'a'; i &lt; 'a' + maxDeep; i++) {\n            if (had.contains(i))\n                continue;\n            Set&lt;Character&gt; newHad = new HashSet&lt;&gt;(had);\n            newHad.add(i);\n            int r = work(cur + 1, maxDeep, newHad, aim + i, grid);\n            if (r != -1) {\n                max = Math.min(max, r);\n            }\n        }\n        return max == Integer.MAX_VALUE ? -1 : max;\n    }\n\n    private void changeLocStart(Loc startLoc, char target, String[] grid) {\n        for (int i = 0; i &lt; grid.length; i++) {\n            for (int j = 0; j &lt; grid[i].length(); j++) {\n                if (grid[i].charAt(j) == target) {\n                    startLoc.x = i;\n                    startLoc.y = j;\n                    return;\n                }\n            }\n        }\n    }\n\n    // 广搜，查询起点到终点\n    private int bfs(String[] grid, Loc start, Set&lt;Character&gt; had, Character target) {\n        Queue&lt;Loc&gt; q = new LinkedList&lt;&gt;();\n        Set&lt;Loc&gt; used = new HashSet&lt;&gt;();\n\n        q.offer(start);\n\n        while (!q.isEmpty()) {\n            Loc front = q.poll();\n            if (used.contains(front)) {\n                continue;\n            }\n            used.add(front);\n            if (grid[front.x].charAt(front.y) == target)\n                return front.step;\n\n            for (int i = 0; i &lt; dir.length; i++) {\n                Loc nxt = new Loc(front.x + dir[i].x, front.y + dir[i].y, front.step + 1);\n\n                if (nxt.x &lt; 0 || nxt.x &gt;= grid.length || nxt.y &lt; 0 || nxt.y &gt;= grid[0].length()) {\n                    continue;\n                }\n\n                if (grid[nxt.x].charAt(nxt.y) == '#')\n                    continue;\n                else if (grid[nxt.x].charAt(nxt.y) == '.' || grid[nxt.x].charAt(nxt.y)== '@'\n                        || (grid[nxt.x].charAt(nxt.y) &gt;= 'a' &amp;&amp; grid[nxt.x].charAt(nxt.y) &lt;= 'z')) {\n                    q.offer(nxt);\n                } else if (grid[nxt.x].charAt(nxt.y) &gt;= 'A' &amp;&amp; grid[nxt.x].charAt(nxt.y) &lt;= 'Z') {\n                    Character need = (char) (grid[nxt.x].charAt(nxt.y) - ('Z' - 'z'));\n                    if (!had.contains(need)) {\n                        continue;\n                    }\n                    q.offer(nxt);\n                }\n\n            }\n        }\n        return -1;\n\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(&quot;case 1&quot;);\n        System.out.println(solution.shortestPathAllKeys(new String[]{&quot;@.a.#&quot;,&quot;###.#&quot;,&quot;b.A.B&quot;}));\n        System.out.println(&quot;case 2&quot;);\n        System.out.println(solution.shortestPathAllKeys(new String[]{&quot;@..aA&quot;,&quot;..B#.&quot;,&quot;....b&quot;}));\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n</code></pre>\n","tags":["Leetcode"]},{"title":"红黑树","url":"/2019/11/24/%E7%BA%A2%E9%BB%91%E6%A0%91/","content":"<h2 id=\"红黑树\"><a class=\"markdownIt-Anchor\" href=\"#红黑树\"></a> 红黑树</h2>\n<p>我们都知道平衡二叉查找树（排序树）在极端情况下，查询效率为O(N)。因此需要一个自平衡的数据结构保证查找效率。本片主角红黑树树就这样诞生了。</p>\n<blockquote>\n<p>红黑树（英语：Red–black tree）是一种自平衡二叉查找树，是在计算机科学中用到的一种数据结构，典型的用途是实现关联数组。它在1972年由鲁道夫·贝尔发明，被称为&quot;对称二叉B树&quot;，它现代的名字源于Leo J. Guibas和Robert Sedgewick于1978年写的一篇论文。红黑树的结构复杂，但它的操作有着良好的最坏情况运行时间，并且在实践中高效：它可以在log n时间内完成查找，插入和删除，这里的n是树中元素的数目.</p>\n<p>—— 摘自wiki对红黑树的介绍</p>\n</blockquote>\n<h3 id=\"性质\"><a class=\"markdownIt-Anchor\" href=\"#性质\"></a> 性质</h3>\n<p>红黑树是一颗查询复杂度保持在O(log N) 的自平衡二叉查找树。在原有的二叉查找树的性质下，通过给节点上色满足如下性质实现：</p>\n<ul>\n<li><strong>节点是红色或黑色。</strong></li>\n<li><strong>根是黑色。</strong></li>\n<li><strong>所有叶子都是黑色（叶子节点指NIL节点）。</strong></li>\n<li><strong>每个红色节点必须有两个黑色的子节点。（从每个叶子到根的所有路径上不能有两个连续的红色节点。）</strong></li>\n<li><strong>从任一节点到其每个叶子的所有简单路径都包含相同数目的黑色节点。</strong></li>\n</ul>\n<p>具体的某个红黑树入大概入下图所示。 注意<strong>任何红黑树都要满足上面五条性质。</strong></p>\n<p><img src=\"https://blog-bucket-1300756499.cos.ap-chengdu.myqcloud.com/%E7%BA%A2%E9%BB%91%E6%A0%91.png\" alt=\"\" /></p>\n<h3 id=\"操作\"><a class=\"markdownIt-Anchor\" href=\"#操作\"></a> 操作</h3>\n<p>红黑树的操作包括新增、删除、和查询操作。 查询操作与之前的二叉树查找树雷同，这里略过。额外地，需要说明一下二叉查找树中的旋转操作</p>\n<h4 id=\"旋转\"><a class=\"markdownIt-Anchor\" href=\"#旋转\"></a> 旋转</h4>\n<p>二叉排序树的旋转指的是不破坏二叉树性质的情况下，改变树的结构的一种操作。具体分为如下两种操作：</p>\n<ul>\n<li>左旋， 将树进行逆时针旋转。如图所示，节点E进行左旋，原本E的右子树接替E的位置称为父亲，E成为S节点的左孩子。注意如果S原本有左子树（左子树的值应该在E到S之间），将该树称为E的新右儿子。仍然满足二叉排序树的规则：</li>\n</ul>\n<p><img src=\"https://blog-bucket-1300756499.cos.ap-chengdu.myqcloud.com/rotationLeft.gif\" alt=\"\" /></p>\n<ul>\n<li>右旋，将树进行顺时针旋转。左旋的镜像操作。如图所示：</li>\n</ul>\n<p><img src=\"https://blog-bucket-1300756499.cos.ap-chengdu.myqcloud.com/rotationRight.gif\" alt=\"\" /></p>\n<p>注意，旋转是满足二叉排序树的结构变化操作。 旋转后的节点高度可能会发生变化。 红黑树而言，可能会导致与其性质冲突。 因此需要再对红黑树进行重染色。</p>\n<h4 id=\"新增\"><a class=\"markdownIt-Anchor\" href=\"#新增\"></a> 新增</h4>\n<p>红黑树新增时，默认新增的是红色节点。一种情况是，如果节点是根结点，则将树染红即可；一种简单的情况是，当节点的父亲是黑色节点时显然不会违反之前的规则。当父亲节点是红色节点时。需要分情况讨论。</p>\n<ol>\n<li>\n<p>当节点的叔叔节点（父亲节点的兄弟节点）是红色时。 将父亲节点和叔叔节点染黑，将爷爷节点染红。这样操作后，所有经过父亲节点和叔叔节点黑色节点数不变，满足<strong>性质5</strong>，但爷爷节点染红后可能会导致它其与上层节点的冲突。因此当前指针指向爷爷节点，重新进行一次判断。<br />\n<img src=\"https://blog-bucket-1300756499.cos.ap-chengdu.myqcloud.com/%E7%BA%A2%E9%BB%91%E6%A0%91%E6%8F%92%E5%85%A51.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>当前节点的叔叔节点为黑色时，分如下两种情况来讨论（这里以父亲节点为左子树来判断，若是右子树则镜像操作即可）</p>\n<ol>\n<li>\n<p>当前节点是父亲节点的左子树。 则将父亲节点染黑，爷爷节点染红。 再对爷爷进行右旋操作。 此时经过父亲节点的节点和黑节点数不变（满足<strong>性质5</strong>）。<br />\n<img src=\"https://blog-bucket-1300756499.cos.ap-chengdu.myqcloud.com/%E7%BA%A2%E9%BB%91%E6%A0%91%E6%8F%92%E5%85%A5%202.1.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>当前节点是父亲节点的右子树。则将父亲节点进行左旋，当前指针指向原来的父节点。此时当前节点变为父亲节点的左子树。 按照 2.1 的方式处理。<br />\n<img src=\"https://blog-bucket-1300756499.cos.ap-chengdu.myqcloud.com/%E7%BA%A2%E9%BB%91%E6%A0%91%E6%8F%92%E5%85%A5%202.2.png\" alt=\"\" /></p>\n</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"删除\"><a class=\"markdownIt-Anchor\" href=\"#删除\"></a> 删除</h4>\n<p>删除操作比较复杂。 大概跟味两部分：删除流程和删除节点后平衡操作。</p>\n<h5 id=\"删除流程\"><a class=\"markdownIt-Anchor\" href=\"#删除流程\"></a> 删除流程</h5>\n<p>首先通过二分操作找到需要删除的节点。根据当前节点判断是否能删除：</p>\n<ol>\n<li>如果被删除节点有两个孩子：直接寻找该节点的中序后继（即右子树中最小的节点）。后继节点的值覆盖当前节点值。指针指向后继重新进行判断。</li>\n<li>如果被删除节点有一个孩子或孩子都为 NIL：则继续进行判断</li>\n<li>如果被删除节点是红色节点：直接将孩子节点顶替当前节点。不会影响到性质。</li>\n<li>如果被删除节点是黑色节点，且其孩子节点为红色：将孩子节点顶替当前节点，再讲孩子节点染黑即可。</li>\n<li>如果被删除节点是黑色节点，且孩子节点都为黑色（此时孩子节点必为NIL节点，否则单独节点为黑色不满足性质5）：当时情况较为复杂，则进行以下删除后平衡操作。</li>\n</ol>\n<h5 id=\"删除后平衡操作\"><a class=\"markdownIt-Anchor\" href=\"#删除后平衡操作\"></a> 删除后平衡操作</h5>\n<p>首先是如果当前节点已经是根结点了，则将根结点染黑。</p>\n<p>我们将删除前的节点定义为N（先平衡，再删除替换节点），节点的父节点为P， 兄弟节点为S，兄弟节点的左子树为SL，右子树为SR。我们遍历N、P、S、SL、SR可能有的情况有如下几种，我们将主意进行讨论。（下文将由N节点为P节点的左子树进行讨论。若为右子树，镜像操作即可）</p>\n<table>\n<thead>\n<tr>\n<th>N</th>\n<th>P</th>\n<th>S</th>\n<th>SL</th>\n<th>SR</th>\n<th>case</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>B</td>\n<td>S</td>\n<td>B</td>\n<td>B(NIL)</td>\n<td>B(NIL)</td>\n<td>(1)</td>\n</tr>\n<tr>\n<td>B</td>\n<td>B</td>\n<td>B</td>\n<td>B(NIL)</td>\n<td>B(NIL)</td>\n<td>(2)</td>\n</tr>\n<tr>\n<td>B</td>\n<td>B</td>\n<td>S</td>\n<td>B</td>\n<td>B</td>\n<td>(3)</td>\n</tr>\n<tr>\n<td>B</td>\n<td>B(or S)</td>\n<td>B</td>\n<td>S</td>\n<td>B(NIL)</td>\n<td>(4)</td>\n</tr>\n<tr>\n<td>B</td>\n<td>B(or S)</td>\n<td>B</td>\n<td>S(or B(NIL))</td>\n<td>S</td>\n<td>(5)</td>\n</tr>\n</tbody>\n</table>\n<ol>\n<li>\n<p>删除节点为黑色， 父亲节点为红色， S节点为黑色， 且S节点的孩子SL、SR都为黑色（NIL节点）。 则将P节点染黑，S节点染红。则经过S节点的黑色节点数不变。经过N的黑色节点数补齐。满足相关性质。<br />\n<img src=\"https://blog-bucket-1300756499.cos.ap-chengdu.myqcloud.com/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%88%A0%E9%99%A4%201.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>删除节点为黑色， 父亲节点为黑色， S节点为黑色， 且S节点的孩子SL、SR都为黑色（NIL节点）。将S节点染红。此时通过N节点和通过S节节点，即通过P的比删除前少1。将当前指针指向P节点，重新执行平衡操作。<br />\n<img src=\"https://blog-bucket-1300756499.cos.ap-chengdu.myqcloud.com/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%88%A0%E9%99%A4%202.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>删除节点为黑色，父亲节点为黑色，S节点为红色，则S节点的孩子SL、SR都为黑色。将P节点染红，S节点染黑，再对叶子节点进行左旋。此时经过S节点的数量不变。经过N的节点仍然少1，此时P为红色。按照情况4、5进行判断。<br />\n<img src=\"https://blog-bucket-1300756499.cos.ap-chengdu.myqcloud.com/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%88%A0%E9%99%A4%203.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>删除节点为黑色，父亲节点为红色或者为黑色，S节点为黑色，其左SL节点为红色，右节点为黑色（为NIL）。将SL染黑，S染红，S节点右旋。这样S和SL角色互换，可以按照情况5判断。<br />\n<img src=\"https://blog-bucket-1300756499.cos.ap-chengdu.myqcloud.com/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%88%A0%E9%99%A44.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>删除节点为黑色，父亲节点为红色或者黑色，S节点为黑色。其右子树SR为红色（SL为红色或黑（NIL））。S节点染为P节点的颜色，P节点染黑，SR节点染黑，P节点左旋。 此时SR节点不变， SL节点和N节点恢复。满足规律5。恢复平衡。<br />\n<img src=\"https://blog-bucket-1300756499.cos.ap-chengdu.myqcloud.com/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%88%A0%E9%99%A45.png\" alt=\"\" /></p>\n</li>\n</ol>\n<h3 id=\"证明\"><a class=\"markdownIt-Anchor\" href=\"#证明\"></a> 证明</h3>\n<p>我们在之前说过红黑树的查询效率是log2(n)。但具体为什么根据前面5条性质即确定红黑树的具体查询效率的呢？需要进行证明：</p>\n<p>首先定义 BH(v) 为节点黑色高度（ 红黑树的节点v上到他的叶子节点的黑色节点的个数，不计v本身）、TOTAL[ BH(v) ] 为 当黑高为 BH(v 时，树可能有的总叶子节点个数 可知</p>\n<ol>\n<li>\n<p>BH(v) = 0 时 v 此时可能为空节点或只有v本身 、TOTAL[ BH(v) ] 最小为 0</p>\n</li>\n<li>\n<p>当 BH(v) &gt; 0 时： 根据 <strong>性质5</strong> 黑高为 BH(V) 的 红黑树， 其子树的黑高至少为 BH(V) - 1 （或子树的高度仍为 BH(V) ）即数的节点总数</p>\n</li>\n</ol>\n<p class='katex-block'><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>T</mi><mi>O</mi><mi>T</mi><mi>A</mi><mi>L</mi><mo stretchy=\"false\">[</mo><mi>B</mi><mi>H</mi><mo stretchy=\"false\">(</mo><mi>v</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">]</mo><mo>≥</mo><mn>2</mn><mo>⋅</mo><mi>T</mi><mi>O</mi><mi>T</mi><mi>A</mi><mi>L</mi><mo stretchy=\"false\">[</mo><mi>B</mi><mi>H</mi><mo stretchy=\"false\">(</mo><mi>v</mi><mo stretchy=\"false\">)</mo><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">TOTAL[BH(v)] \\geq 2 \\cdot TOTAL[BH(v) - 1] + 1\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathdefault\">A</span><span class=\"mord mathdefault\">L</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">)</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathdefault\">A</span><span class=\"mord mathdefault\">L</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></span></p>\n<p>由此可得</p>\n<p class='katex-block'><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>T</mi><mi>O</mi><mi>T</mi><mi>A</mi><mi>L</mi><mo stretchy=\"false\">[</mo><mi>B</mi><mi>H</mi><mo stretchy=\"false\">(</mo><mi>v</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">]</mo><mo>=</mo><msup><mn>2</mn><mrow><mi>B</mi><mi>H</mi><mo stretchy=\"false\">(</mo><mi>v</mi><mo stretchy=\"false\">)</mo></mrow></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">TOTAL[BH(v)] = 2^{BH(v)} - 1\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathdefault\">A</span><span class=\"mord mathdefault\">L</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">)</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0213299999999998em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.08125em;\">H</span><span class=\"mopen mtight\">(</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></span></p>\n<p>因此BH(V) 跟 TOTAL[V] 之间满足指数关系。又由<strong>性质4</strong>可知，树的黑高至少为这棵树的二分之一。 即 BH(V) &gt;= H(V) / 2，可得，对于根结点root而言。有</p>\n<p class='katex-block'><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mo>≥</mo><msup><mn>2</mn><mrow><mi>B</mi><mi>H</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mo stretchy=\"false\">)</mo></mrow></msup><mo>−</mo><mn>1</mn><mo>=</mo><mo>&gt;</mo><mi>n</mi><mo>≥</mo><msup><mn>2</mn><mrow><mi>H</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mo stretchy=\"false\">)</mo><mo>÷</mo><mn>2</mn></mrow></msup><mo>−</mo><mn>1</mn><mo>=</mo><mo>&gt;</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo>≥</mo><msup><mn>2</mn><mrow><mi>H</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mo stretchy=\"false\">)</mo><mo>÷</mo><mn>2</mn></mrow></msup><mo>=</mo><mo>&gt;</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>≥</mo><mi>H</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mo stretchy=\"false\">)</mo><mo>÷</mo><mn>2</mn><mo>=</mo><mo>&gt;</mo><mi>H</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mo stretchy=\"false\">)</mo><mo>≤</mo><mn>2</mn><mo>⋅</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\nn \\geq 2^{BH(root)} - 1\n\n=&gt; n \\geq 2^{H(root) \\div 2} - 1\n\n=&gt; n + 1 \\geq 2^{H(root) \\div 2}\n\n=&gt; log_2(n + 1) \\geq H(root) \\div 2\n\n=&gt;  H(root) \\leq 2 \\cdot log_2(n + 1)\n\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0213299999999998em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.08125em;\">H</span><span class=\"mopen mtight\">(</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault mtight\">o</span><span class=\"mord mathdefault mtight\">o</span><span class=\"mord mathdefault mtight\">t</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0213299999999998em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.08125em;\">H</span><span class=\"mopen mtight\">(</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault mtight\">o</span><span class=\"mord mathdefault mtight\">o</span><span class=\"mord mathdefault mtight\">t</span><span class=\"mclose mtight\">)</span><span class=\"mbin mtight\">÷</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.78041em;vertical-align:-0.13597em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.938em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.08125em;\">H</span><span class=\"mopen mtight\">(</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault mtight\">o</span><span class=\"mord mathdefault mtight\">o</span><span class=\"mord mathdefault mtight\">t</span><span class=\"mclose mtight\">)</span><span class=\"mbin mtight\">÷</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">t</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">÷</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">t</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<h3 id=\"与-avl-的比较\"><a class=\"markdownIt-Anchor\" href=\"#与-avl-的比较\"></a> 与 avl 的比较</h3>\n<p>两者都是经过优化的自平衡二叉树。有各自的自平衡算法，增删查效率都是log(n)但有一些区别。但从平衡性而言，AVL的平衡性更加严格，如下图所示情况。 红黑树允许较低的平衡性（但复杂度仍为log(n)）换取更少的自平衡操作。由于avl数平衡性高于红黑树，查询效率上会高于红黑树（但复杂度仍为log(n)）。红黑树算是比较「折衷」的平衡树方案，C++的STL中和JAVA的TreeMap&amp;HashMap都实现了红黑树以达到O(log(n)) 的插入删除的效果</p>\n<style>\nimg {\nmargin:auto;\nwidth:61.8%;\n}\n</style>\n","tags":["数据结构"]},{"title":"Hello World","url":"/2019/11/22/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"quick-start\"><a class=\"markdownIt-Anchor\" href=\"#quick-start\"></a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"markdownIt-Anchor\" href=\"#create-a-new-post\"></a> Create a new post</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"run-server\"><a class=\"markdownIt-Anchor\" href=\"#run-server\"></a> Run server</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"generate-static-files\"><a class=\"markdownIt-Anchor\" href=\"#generate-static-files\"></a> Generate static files</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"markdownIt-Anchor\" href=\"#deploy-to-remote-sites\"></a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"tags","url":"/tags/index.html","content":""},{"title":"tags","url":"/tags/index-1.html","content":""}]